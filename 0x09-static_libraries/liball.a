!<arch>
0-isupper.c/    0           0     0     644     197       `
#include "main.h"

/**
 * _isupper - Entry function
 * @c: integer
 * Return: Always 0 or 1
 */
int _isupper(int c)
{  
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
{
return (0);
}
return (0);
}

0-memset.c/     0           0     0     644     357       `
 #include "main.h"
/**
 *_memset - fill a block of memory with a specific value
 *@s: starting address of memory to be filled
 *@b: the desired value
 *@n: number of bytes to be changed
 *
 *Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
int i = 0;

for (; n > 0; i++)
{
s[i] = b;
n--;
}
return (s);
}

0-strcat.c/     0           0     0     644     318       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: input parameter string
 * @src: input parameter string
 *
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
int e;
int f;

e = 0;

while (dest[e] != 0)
{
e++;
}

f = 0;

while (src[f] != 0)
{
dest[e] = src[f];
e++;
f++;
}
return (dest);
}
100-atoi.c/     0           0     0     644     531       `
#include "main.h"

/**
 * _atoi - converts a string to an integer.
 * @s: input string.
 * Return: integer.
 */
int _atoi(char *s)
{
unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;

while (*(s + count) != '\0')
{
if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
break;
if (*(s + count) == '-')
pn *= -1;

if ((*(s + count) >= '0') && (*(s + count) <= '9'))
{
if (size > 0)
m *= 10;
size++;
}
count++;
}

for (i = count - size; i < count; i++)
{
oi = oi + ((*(s + i) - 48) * m);
m /= 10;
}
return (oi *pn);
}

1-isdigit.c/    0           0     0     644     246       `
#include "main.h"

/**
* _isdigit - checks if parameter is a number between 0 to 9.
* @c: input number.
* Return: 1 if is a number (0 to 9), 0 in other case.
*/
int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
else
{
return (0);
}
}
1-memcpy.c/     0           0     0     644     347       `
#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n byted changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
int r = 0;
int i = n;

for (; r < i; r++)
{
dest[r] = src[r];
n--;
}
return (dest);
}

1-strncat.c/    0           0     0     644     362       `
#include "main.h"
/**
 * _strncat - concatenates two strings
 * @dest: input parameter string
 * @src: input parameter string
 * @n: times to iterations
 *
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
int e;
int f;

e = 0;

while (dest[e] != 0)
{
e++;
}
f = 0;

while (src[f] != 0 && f < n)
{
dest[e] = src[f];
e++;
f++;
}
return (dest);
}
2-strchr.c/     0           0     0     644     265       `
#include "main.h"
/**
 * _strchr - locates a character in a string
 * @s: string to search
 * @c: char to find
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
int i = 0;

for (; s[i] >= '\0'; i++)
{
if (s[i] == c)
return (&s[i]);
}
return (0);
}

2-strlen.c/     0           0     0     644     224       `
#include "main.h"

/**
 * _strlen - returns the length of a string.
 * @s: input stringeturn.
 * Return: length of a string.
 */
int _strlen(char *s)
{
int count = 0;

while (*(s + count) != '\0')
count++;
return (count);
}
2-strncpy.c/    0           0     0     644     371       `
#include "main.h"
/**
 * _strncpy - copie the string
 * @dest: array that returns
 * @src: the pointer that receive the string
 * @n: times to interate
 * Return: the parameter dest.
 */
char *_strncpy(char *dest, char *src, int n)
{
int e;

e = 0;
while (e < n && src[e] != '\0')
{
dest[e] = src[e];
e++;
}
e = e;
while (e < n)
{
dest[e] = '\0';
e++;
}
return (dest);
}

3-islower.c/    0           0     0     644     174       `
#include "main.h"
/**
* _islower - check for lower case letter
* @c : character to check the case
* Return: 0 or 1
*/

int _islower(int c)
{
return (c >= 97 && c <= 122);

}
3-puts.c/       0           0     0     644     232       `
#include "main.h"

/**
 * _puts - prints a string, followed by a new line,
 * @str: pointer to the string to print
 * Return: void
 */

void _puts(char *str)
{
int i = 0;

while (str[i])
{
_putchar(str[i]);
i++;
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     282       `
#include "main.h"
/**
 * _strcmp - compares two strings
 * @s1: input parameter
 * @s2: input parameter
 * Return: 0 if equal or b if is different
 */
int _strcmp(char *s1, char *s2)
{
int e = 0;
int f = 0;

while (s1[e] != '\0' && f == 0)
{
f = s1[e] - s2[e];
e++;
}
return (f);
}
3-strspn.c/     0           0     0     644     333       `
#include "main.h"
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
unsigned int n = 0;
int r;

while (*s)
{
for (r = 0; accept[r]; r++)
{
if (*s == accept[r])
{
n++;
break;
}
else if (accept[r + 1] == '\0')
return (n);
}
s++;
}
return (n);
}

4-isalpha.c/    0           0     0     644     192       `
#include "main.h"

/**
* _isalpha - check for lower case letter
* @c : character to check
* Return: 0 or 1
*/

int _isalpha(int c)
{
return ((c >= 97 && c <= 122) || (c >= 65 && c <= 90));

}
4-strpbrk.c/    0           0     0     644     264       `
#include "main.h"
/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
int j;

while (*s)
{
for (j = 0; accept[j]; j++)
{
if (*s == accept[j])
return (s);
}
s++;
}

return ('\0');
}
5-strstr.c/     0           0     0     644     380       `
#include "main.h"
/**
 * _strstr - locates a substring
 * @haystack: string to search in
 * @needle: substring to look for
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
for (; *haystack != '\0'; haystack++)
{
char *l = haystack;
char *p = needle;

while (*l == *p && *p != '\0')
{
l++;
p++;
}

if (*p == '\0')
return (haystack);
}

return (0);
}
6-abs.c/        0           0     0     644     145       `
#include "main.h"

/**
* _abs - return abs value
* @n : number to check
* Return: 0 or 1
*/

int _abs(int n)
{

return (n >= 0 ? n : n * -1);

}

9-strcpy.c/     0           0     0     644     417       `
#include "main.h"
#include <stdio.h>
/**
 * _strcpy - copies the string pointed to by src,
 * including the terminating null byte, to the
 * buffer pointed to by dest.
 * @dest: destination.
 * @src: source.
 * Return: the pointer to dest.
 */
char *_strcpy(char *dest, char *src)
{
int count = 0;

while (count >= 0)
{
*(dest + count) = *(src + count);
if (*(src + count) == '\0')
break;
count++;
}
return (dest);
}

_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */

int _putchar(char c)

{
return (write(1, &c, 1));
}
